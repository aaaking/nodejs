#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('segment:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(`server running on $port: ` + port)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


let Promise = require('promise')
function testPromisify(cmd) {
  return new Promise(function (resolve, reject) {
    resolve({ "data": cmd })
  })
}
function doIt(cmd, callback) {
  //  Promise.reject('hash getTransactionReceipt err')
  testPromisify(cmd)
    .then(data => {
      console.log('this data: ', data)
      callback(null, data)
      // return data
    })
    // .then(d => {
    //   callback(null, d)
    // })
    .catch(err => {
      callback(err, null)
    })
}
const { promisify } = require('util');
// const stat = util.promisify(testPromisify);
async function ttt() {
  // return Promise.reject('hash getTransactionReceipt err')
  var sss = await promisify(doIt).bind(doIt)('./1.jpg')
  console.log('---------------sss', sss)
  var sss2 = await promisify(doIt).bind(doIt)('./2.jpg')
  console.log('---------------sss2', sss2)
  // return sss2
  if (!sss) {
    return Promise.reject('hash getTransactionReceipt err')
  }
  // sss.then()
  //     .catch(async function (err) {
  //         console.log('---------------sss')
  //         var sss2 = await stat('./1.jpg')
  //         console.log('---------------222')
  //     })
  // if (sss2) {
  //     console.log('succes-------------', sss2)
  // } else {
  //     console.log('fail-------------', sss2)
  // }
  // return Promise.reject('hash getTransactionReceipt err')
}
ttt()
  .then(data => {
    console.log('succes-------------', data)
  })
  .catch(err => {
    console.log('fail-=-------------------', err)
  })
// stat('.')
//     .then((stats) => {
//         // Do something with `stats`
//     })
//     .catch((error) => {
//         // Handle the error.
//     });
